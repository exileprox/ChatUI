/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatclient;

import g53sqm.chat.client.Client;
import g53sqm.chat.client.ClientListener;
import g53sqm.chat.client.servermessage.Message;
import g53sqm.chat.client.servermessage.ResultCode;
import java.awt.Color;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Chris
 */
public class ConnectPanel extends javax.swing.JPanel {
    private ChatClientMainFrame frameRef;
    private SessionObject sessionObj;
    private boolean connecting;
    private static final Color BAD_COLOR = Color.RED;
    private static final Color OK_COLOR = Color.GREEN;
    private static final Color UNKNOWN_COLOR = Color.GRAY;

    /**
     * Creates new form ConnectPanel
     */
    public ConnectPanel(ChatClientMainFrame frameRef, SessionObject sessionObj) {
        initComponents();
        this.frameRef = frameRef;
        this.sessionObj = sessionObj;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelHost = new javax.swing.JLabel();
        jTextFieldHost = new javax.swing.JTextField();
        jLabelPort = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jButtonConnect = new javax.swing.JButton();
        jScrollPaneStatus = new javax.swing.JScrollPane();
        jTextPaneStatus = new javax.swing.JTextPane();

        setPreferredSize(new java.awt.Dimension(300, 450));

        jLabelHost.setText("Host:");

        jTextFieldHost.setText("127.0.0.1");
        jTextFieldHost.setName("jTextFieldHost"); // NOI18N

        jLabelPort.setText("Port:");

        jTextFieldPort.setText("9090");
        jTextFieldPort.setName("jTextFieldPort"); // NOI18N

        jButtonConnect.setText("Connect");
        jButtonConnect.setName("jbuttonConnect"); // NOI18N
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        jTextPaneStatus.setBackground(new java.awt.Color(204, 204, 204));
        jTextPaneStatus.setFocusable(false);
        jTextPaneStatus.setName("jTextPaneStatus"); // NOI18N
        jScrollPaneStatus.setViewportView(jTextPaneStatus);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneStatus)
                    .addComponent(jButtonConnect, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelHost, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldHost, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPort, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldPort)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelHost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldHost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPort, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButtonConnect)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        synchronized (this) {
            DisableConnect();

            this.invalidate();
            this.revalidate();
            this.repaint();
            String host = jTextFieldHost.getText();
            int portNumber;
            try {
                portNumber = Integer.parseInt(jTextFieldPort.getText());
            } catch (NumberFormatException e) {
                updateStatusText("Port number must be a non-negative number", BAD_COLOR);
                EnableConnect();
                return;
            }        
            sessionObj.setClient(new Client(host, portNumber));
            updateStatusText("Connecting to server : " + host + " on port:" + portNumber, OK_COLOR);
            Thread initClientThread = new Thread(new Runnable() {
                public void run() {
                    try {
                        sessionObj.getClient().initializeSocketClient();
                    } catch (Exception e) {
                        updateStatusText("Failed to establish connection with server", BAD_COLOR);
                        EnableConnect();
                        return;
                    }
                    updateStatusText("Connected to server", OK_COLOR);
                    nextPage();
                    sessionObj.getClient().addListener(new ClientListener() {

                        @Override
                        public void onServerMessageReceived(Message message) {
                            if (message.getResultCode() == ResultCode.OK) {
                                updateStatusText(message.getMessage(), OK_COLOR);
                            } else if (message.getResultCode() == ResultCode.BAD) {
                                updateStatusText(message.getMessage(), BAD_COLOR);
                            } else {
                                updateStatusText(message.getMessage(), UNKNOWN_COLOR);
                            }
                        }
                    });
                    sessionObj.getClient().run();
                }
            });
            initClientThread.start();
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed

    private void nextPage(){
          frameRef.setPanel(new RegisterPanel(frameRef,SessionObject.getInstance()));
    }
    private void DisableConnect() {

        connecting = false;
        jTextFieldHost.setEnabled(false);
        jTextFieldPort.setEnabled(false);
        jButtonConnect.setEnabled(false);
    }

    private void EnableConnect() {
        connecting = false;
        jTextFieldHost.setEnabled(true);
        jTextFieldPort.setEnabled(true);
        jButtonConnect.setEnabled(true);
    }

    private void updateStatusText(String status, Color c) {
        final String statusTxt = status;
        final Color color = c;
        Thread updateTextThread = new Thread(new Runnable() {
            public void run() {
                synchronizedStatusUpdate(statusTxt, color);
            }
        });
        updateTextThread.start();
    }

    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

    private synchronized void synchronizedStatusUpdate(String status, Color c) {
        appendToPane(jTextPaneStatus, status + "\n", c);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JLabel jLabelHost;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JScrollPane jScrollPaneStatus;
    private javax.swing.JTextField jTextFieldHost;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextPane jTextPaneStatus;
    // End of variables declaration//GEN-END:variables
}
