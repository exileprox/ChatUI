/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatclient;

import g53sqm.chat.client.ClientListener;
import g53sqm.chat.client.servercommand.HailCommand;
import g53sqm.chat.client.servercommand.ListCommand;
import g53sqm.chat.client.servercommand.MessageCommand;
import g53sqm.chat.client.servercommand.QuitCommand;
import g53sqm.chat.client.servercommand.StatusCommand;
import g53sqm.chat.client.servermessage.Message;
import g53sqm.chat.client.servermessage.ResultCode;
import java.awt.Color;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Chris
 */
public class ChatPanel extends javax.swing.JPanel {

    private ChatClientMainFrame frameRef;
    private SessionObject sessionObj;
    private static final Color BAD_COLOR = Color.RED;
    private static final Color OK_COLOR = Color.GREEN;
    private static final Color UNKNOWN_COLOR = Color.GRAY;

    /**
     * Creates new form ChatPanel
     */
    public ChatPanel(ChatClientMainFrame frameRef, SessionObject sessionObj) {
        initComponents();
        this.frameRef = frameRef;
        this.sessionObj = sessionObj;
        sessionObj.getClient().addListener(new ClientListener() {

            @Override
            public void onServerMessageReceived(Message message) {
                if (message.getResultCode() == ResultCode.OK) {
                    updateStatusText(message.getMessage(), OK_COLOR);
                } else if (message.getResultCode() == ResultCode.BAD) {
                    updateStatusText(message.getMessage(), BAD_COLOR);
                } else {
                    updateStatusText(message.getMessage(), UNKNOWN_COLOR);
                }
            }
        });
    }

    private void updateStatusText(String status, Color c) {
        final String statusTxt = status;
        final Color color = c;
        Thread updateTextThread = new Thread(new Runnable() {
            public void run() {
                synchronizedStatusUpdate(statusTxt, color);
            }
        });
        updateTextThread.start();
    }

    private void appendToPane(JTextPane tp, String msg, Color c) {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }

    private synchronized void synchronizedStatusUpdate(String status, Color c) {
        appendToPane(jTextPaneStatus, status + "\n", c);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneStatus = new javax.swing.JScrollPane();
        jTextPaneStatus = new javax.swing.JTextPane();
        jComboBoxCommand = new javax.swing.JComboBox();
        jButtonSend = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldReceiver = new javax.swing.JTextField();
        jTextFieldMessage = new javax.swing.JTextField();

        jTextPaneStatus.setBackground(new java.awt.Color(204, 204, 204));
        jTextPaneStatus.setFocusable(false);
        jTextPaneStatus.setName("jTextPaneStatus"); // NOI18N
        jScrollPaneStatus.setViewportView(jTextPaneStatus);

        jComboBoxCommand.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "List", "Status", "Hail", "Message", "Quit" }));
        jComboBoxCommand.setName("jComboBoxCommand"); // NOI18N
        jComboBoxCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCommandActionPerformed(evt);
            }
        });

        jButtonSend.setText("Send");
        jButtonSend.setName("jButtonSend"); // NOI18N
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jLabel1.setText("Receiver:");

        jLabel2.setText("Message:");

        jTextFieldReceiver.setEnabled(false);

        jTextFieldMessage.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneStatus)
                    .addComponent(jComboBoxCommand, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSend, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(jTextFieldReceiver))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonSend)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCommandActionPerformed
        switch (jComboBoxCommand.getSelectedItem().toString().toLowerCase()) {
            case "hail": {
                enableMessageTextFields();
                break;
            }
            case "message": {
                enableAllTextFields();
                break;
            }
            case "list":
            case "status":
            case "quit": {
                disableAllTextFields();
                break;
            }
            default: {
                disableAllTextFields();
                break;
            }
        }
    }//GEN-LAST:event_jComboBoxCommandActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        switch (jComboBoxCommand.getSelectedItem().toString().toLowerCase()) {
            case "hail": {
                sessionObj.getClient().sendCommandToServer(new HailCommand(jTextFieldMessage.getText()));
                break;
            }
            case "message": {
                sessionObj.getClient().sendCommandToServer(new MessageCommand(jTextFieldReceiver.getText(), jTextFieldMessage.getText()));
                break;
            }
            case "list": {
                sessionObj.getClient().sendCommandToServer(new ListCommand());
                break;
            }
            case "status": {
                sessionObj.getClient().sendCommandToServer(new StatusCommand());
                break;
            }
            case "quit": {
                sessionObj.getClient().sendCommandToServer(new QuitCommand());
                nextPage();
                break;
            }
            default: {
                updateStatusText("bad command received!", BAD_COLOR);
                break;
            }
        }
    }//GEN-LAST:event_jButtonSendActionPerformed

    public void clearAllText() {
        jTextFieldReceiver.setText("");
        jTextFieldMessage.setText("");
    }

    public void enableMessageTextFields() {
        disableAllTextFields();
        jTextFieldMessage.setEnabled(true);
    }

    public void enableAllTextFields() {
        disableAllTextFields();
        jTextFieldReceiver.setEnabled(true);
        jTextFieldMessage.setEnabled(true);
    }

    public void disableAllTextFields() {
        clearAllText();
        jTextFieldReceiver.setEnabled(false);
        jTextFieldMessage.setEnabled(false);
    }

    public void nextPage() {
        frameRef.setPanel(new ConnectPanel(frameRef, SessionObject.getInstance()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSend;
    private javax.swing.JComboBox jComboBoxCommand;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPaneStatus;
    private javax.swing.JTextField jTextFieldMessage;
    private javax.swing.JTextField jTextFieldReceiver;
    private javax.swing.JTextPane jTextPaneStatus;
    // End of variables declaration//GEN-END:variables
}
